---
description: 
globs: 
alwaysApply: true
---
# Automated Workflow & Quality Enforcement Rules

## ü§ñ Pre-Development Automation Checklist

### Before Starting Any Development Work

**1. Environment Verification (Auto-Required)**
```bash
# Check if ai-researcher is active
conda info --envs | grep "*"
# If not ai-researcher, automatically activate:
conda activate ai-researcher
```

**2. Cursor Update Check (Auto-Prompt)**
- Automatically check: `Ctrl+Shift+P` ‚Üí "Check for Updates"
- If updates available ‚Üí Auto-prompt to update before proceeding
- Log update status in development notes

**3. Git Status Verification**
```bash
# Auto-check for uncommitted changes
git status --porcelain
# If dirty working tree ‚Üí prompt to commit or stash
```

**4. Realtime API Connectivity Check**
```bash
# Verify API key is configured
test -f .env && grep -q "OPENAI_API_KEY" .env
# Check WebSocket dependencies
python -c "import websocket; import asyncio; print('WebSocket ready')"
```

## üîÑ Post-Coding Automation Workflow

### After Every Successful Code Change

**MANDATORY SEQUENCE** (Must be executed in order):

**Step 1: Test Validation**
```bash
# Auto-run relevant tests based on changed files
python tests/run_all_tests.py

# If Realtime API files changed, run specific tests
if [[ $(git diff --name-only HEAD~1 | grep -c "openai_realtime_api") -gt 0 ]]; then
    cd openai_realtime_api/examples
    python weather_test_example.py
    python audio_test.py
    cd ../..
fi

# STOP if tests fail - do not proceed to git operations
```

**Step 2: Git Operations (Only if tests pass)**
```bash
# Auto-stage all changes
git add .

# Auto-generate commit message based on changes
# Format: "[Component] Brief description - Test results"
# Examples:
# "[Realtime API] Fix audio feedback loop - Speech-to-speech working"
# "[Weather Functions] Add Chat Completions format - All function tests pass"
# "[Configuration] Fix MemoryClient mocking - All 11 tests pass"
git commit -m "[Auto-generated descriptive message]"

# Auto-push to remote
git push
```

**Step 3: Cleanup Operations**
```bash
# Remove temporary test files
rm -f temp_*.wav temp_*.mp3
rm -f openai_realtime_api/examples/temp_*.wav
# Clear __pycache__ directories
find . -type d -name "__pycache__" -exec rm -rf {} +
```

## üìä Quality Gates & Enforcement

### Code Quality Checkpoints

**Before Git Commit:**
- ‚úÖ Conda environment is `ai-researcher`
- ‚úÖ All tests passing (minimum 85% success rate)
- ‚úÖ No syntax errors in Python files
- ‚úÖ No temporary files in workspace
- ‚úÖ [README.md](mdc:README.md) is up-to-date if structure changed
- ‚úÖ Realtime API examples functional (if modified)
- ‚úÖ WebSocket connections stable
- ‚úÖ No audio feedback loops in speech demos

**Auto-Rejection Criteria:**
- ‚ùå Wrong conda environment active
- ‚ùå Test failure rate > 15%
- ‚ùå Syntax errors in modified files
- ‚ùå Missing docstrings in new functions
- ‚ùå Uncommitted changes to critical files
- ‚ùå Realtime API connection failures
- ‚ùå Audio feedback loops detected
- ‚ùå Function calling schema validation errors

### Test Coverage Requirements

**For Core Voice Agent modifications:**
- [voice_agent_original.py](mdc:voice_agent_original.py) ‚Üí Update [tests/test_configuration.py](mdc:tests/test_configuration.py)
- Configuration changes ‚Üí Update [tests/test_configuration.py](mdc:tests/test_configuration.py)
- New functions ‚Üí Add to appropriate test file
- Integration changes ‚Üí Update [tests/test_integration.py](mdc:tests/test_integration.py)

**For Realtime API modifications:**
- [openai_realtime_api/examples/](mdc:openai_realtime_api/examples/) changes ‚Üí Test all affected examples
- Weather function changes ‚Üí Run [weather_test_example.py](mdc:openai_realtime_api/examples/weather_test_example.py)
- Speech-to-speech changes ‚Üí Test [speech_to_speech_example.py](mdc:openai_realtime_api/examples/speech_to_speech_example.py)
- WebSocket client changes ‚Üí Test connection stability
- Audio processing changes ‚Üí Run [audio_test.py](mdc:openai_realtime_api/examples/audio_test.py)

## üîß Automated Cursor Maintenance

### Daily Startup Routine (Auto-Execute)

**1. Cursor Health Check:**
```bash
# Check Cursor version and available updates
# Log: ~/.cursor/update-check.log
echo "$(date): Checking Cursor updates..." >> ~/.cursor/update-check.log
```

**2. Extension Verification:**
- Verify Python extension is active and updated
- Check Git extension functionality
- Validate workspace configuration
- Ensure WebSocket and audio libraries are accessible

**3. Environment Sync:**
```bash
# Ensure conda environment matches project requirements
conda activate ai-researcher
pip list > current-packages.txt
diff current-packages.txt requirements.txt

# Check Realtime API dependencies
python -c "import openai; import websocket; import asyncio; print('All deps available')"
```

### Weekly Maintenance (Auto-Prompt)

**Every 7 days, auto-prompt for:**
- Cursor IDE update check
- Extension updates review
- Dependency updates: `pip list --outdated`
- Git repository cleanup: `git gc`
- Realtime API compatibility check
- Audio system health verification

## üö® Automated Failure Recovery

### If Tests Fail (Auto-Recovery)

**1. Immediate Actions:**
- Stop git workflow
- Display failing test details
- Suggest specific fixes based on test type

**2. Recovery Options:**
```bash
# For configuration test failures:
python -m pytest tests/test_configuration.py -v --tb=short

# For integration test failures:
python -m pytest tests/test_integration.py -v --tb=short

# For Realtime API failures:
cd openai_realtime_api/examples
python audio_test.py
python weather_test_example.py

# Check environment issues:
conda activate ai-researcher
python --version
```

**3. Realtime API Specific Recovery:**
```bash
# Test WebSocket connectivity
python -c "import websocket; print('WebSocket module working')"

# Check API key configuration
test -f .env && echo "API key file exists" || echo "Missing .env file"

# Test audio system
python -c "import pyaudio; print('Audio system available')"

# Verify no feedback loops
cd openai_realtime_api/examples
python speech_to_speech_example.py --test-mode
```

### If Git Operations Fail

**1. Network Issues:**
```bash
# Check git remote status
git remote -v
git fetch --dry-run
```

**2. Merge Conflicts:**
```bash
# Auto-backup current changes
git stash push -m "Auto-backup $(date)"
# Provide conflict resolution guidance
```

## üìà Automated Metrics & Reporting

### Development Session Tracking

**Auto-Log Each Session:**
- Start time and conda environment used
- Files modified and test results
- Git operations performed
- Cursor update status
- Realtime API test results
- WebSocket connection stability
- Audio feedback incidents

**Session End Report:**
```bash
# Auto-generate session summary
echo "Session $(date): Environment=ai-researcher, Tests=PASS/FAIL, Commits=N, Cursor=UPDATED/CURRENT, RealtimeAPI=FUNCTIONAL/ISSUES" >> .development-log.txt
```

### Weekly Quality Report

**Auto-Generate Every Sunday:**
- Test success rate trends
- Commit frequency and quality
- Cursor update compliance
- Environment consistency metrics
- Realtime API reliability statistics
- Audio feedback incident reports
- WebSocket connection success rates

## üéØ Automation Success Criteria

**Green Light Indicators:**
- ‚úÖ `ai-researcher` environment auto-activated
- ‚úÖ Tests auto-run and pass (‚â•85% success rate)
- ‚úÖ Git operations auto-executed successfully
- ‚úÖ Cursor updates checked and applied
- ‚úÖ Workspace cleaned automatically
- ‚úÖ Quality metrics logged
- ‚úÖ Realtime API examples functional
- ‚úÖ WebSocket connections stable
- ‚úÖ No audio feedback loops detected
- ‚úÖ Weather function calling operational

**Red Flag Triggers (Stop Automation):**
- ‚ùå Wrong environment detected
- ‚ùå Test failure rate >15%
- ‚ùå Git operation failures
- ‚ùå Cursor malfunction detected
- ‚ùå Critical file corruption
- ‚ùå Realtime API connection failures
- ‚ùå Audio feedback loops persistent
- ‚ùå WebSocket connection instability
- ‚ùå Function calling schema errors

## üîç Automated Code Quality Checks

### Pre-Commit Validation

**Core Voice Agent Files:**
```bash
# Check voice_agent_original.py syntax
python -m py_compile voice_agent_original.py

# Validate imports and dependencies
python -c "import voice_agent_original; print('Core agent imports OK')"
```

**Realtime API Components:**
```bash
# Check all examples compile
for file in openai_realtime_api/examples/*.py; do
    python -m py_compile "$file"
done

# Test WebSocket client initialization
python -c "from openai_realtime_api.websocket_client.realtime_client import RealtimeConversation; print('Client imports OK')"

# Validate function schemas
cd openai_realtime_api/examples
python -c "import weather_chat_completion_example; print('Weather schemas valid')"
```

### Post-Commit Verification

**Functional Testing:**
```bash
# Quick smoke test of main components
python -c "import voice_agent_original; print('Core agent loadable')"

# Test Realtime API basic functionality
cd openai_realtime_api/examples
timeout 10s python audio_test.py || echo "Audio test completed/timeout"

# Verify no syntax regressions
python -m py_compile voice_agent.py voice_agent_original.py
```

This automated workflow ensures consistent, high-quality development practices while maintaining the reliability and functionality of both the core voice agent and the new OpenAI Realtime API integration components.

