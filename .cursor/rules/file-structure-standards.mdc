---
description:
globs:
alwaysApply: false
---
# File Structure Standards & Organization Rules

## üèóÔ∏è Voice Agent Project Architecture

### Project Root Structure

```
voice_agent/                              # Main project root
‚îú‚îÄ‚îÄ üìÑ voice_agent_original.py            # üéØ Primary voice agent entry point
‚îú‚îÄ‚îÄ üìÑ requirements.txt                   # üì¶ Root-level Python dependencies
‚îú‚îÄ‚îÄ üìÑ README.md                         # üìñ Main project documentation
‚îú‚îÄ‚îÄ üìÑ .env                              # üîê Environment variables (ignored by git)
‚îú‚îÄ‚îÄ üìÑ .env.example                      # üìù Environment template for setup
‚îú‚îÄ‚îÄ üìÑ .gitignore                        # üö´ Git exclusion patterns
‚îú‚îÄ‚îÄ üìÑ test_audio.wav                    # üéµ Audio test file for development
‚îú‚îÄ‚îÄ üìÅ voice_agent_tests/                # üß™ Core voice agent test suite
‚îú‚îÄ‚îÄ üìÅ openai_realtime_api/              # ‚ö° OpenAI Realtime API integration
‚îú‚îÄ‚îÄ üìÅ twilio_voice_ai/                  # üìû Twilio Voice AI Assistant project
‚îú‚îÄ‚îÄ üìÅ .cursor/                          # ‚öôÔ∏è Cursor IDE rules and configuration
‚îú‚îÄ‚îÄ üìÅ .git/                             # üîÑ Git version control data
‚îú‚îÄ‚îÄ üìÅ .pytest_cache/                    # üóÇÔ∏è PyTest temporary cache
‚îî‚îÄ‚îÄ üìÅ __pycache__/                      # üêç Python bytecode cache
```

## üìÅ Directory Organization Standards

### 1. Core Voice Agent (`/voice_agent_tests/`)

**Purpose**: Comprehensive testing suite for the main voice agent functionality

**Structure**:
```
voice_agent_tests/
‚îú‚îÄ‚îÄ üìÑ run_all_tests.py                  # üöÄ Main test runner script
‚îú‚îÄ‚îÄ üìÑ test_configuration.py             # ‚öôÔ∏è Environment & API key validation
‚îú‚îÄ‚îÄ üìÑ test_recording.py                 # üé§ Audio recording functionality tests
‚îú‚îÄ‚îÄ üìÑ test_transcription.py             # üó£Ô∏è Speech-to-text conversion tests
‚îú‚îÄ‚îÄ üìÑ test_text_to_speech.py            # üîä Text-to-speech synthesis tests
‚îú‚îÄ‚îÄ üìÑ test_agent_logic.py               # ü§ñ AI agent & memory management tests
‚îú‚îÄ‚îÄ üìÑ test_main_loop.py                 # üîÑ Main conversation flow tests
‚îú‚îÄ‚îÄ üìÑ test_integration.py               # üîó End-to-end integration tests
‚îú‚îÄ‚îÄ üìÑ voice_agent_backup.py             # üíæ Backup version of voice agent
‚îî‚îÄ‚îÄ üìÑ VOICE_TROUBLESHOOTING.md          # üîß Debugging and fix guide
```

**File Naming Convention**:
- Test files: `test_[component].py`
- Utilities: `[descriptive_name].py`
- Documentation: `[SUBJECT]_[TYPE].md` (uppercase)

### 2. OpenAI Realtime API (`/openai_realtime_api/`)

**Purpose**: OpenAI Realtime API integration with WebSocket and WebRTC clients

**Structure**:
```
openai_realtime_api/
‚îú‚îÄ‚îÄ üìÑ __init__.py                       # üì¶ Package initialization
‚îú‚îÄ‚îÄ üìÑ README.md                         # üìö API integration documentation
‚îú‚îÄ‚îÄ üìÑ requirements.txt                  # üìã API-specific dependencies
‚îú‚îÄ‚îÄ üìÑ WEATHER_FUNCTIONS.md              # üå§Ô∏è Function calling documentation
‚îú‚îÄ‚îÄ üìÅ examples/                         # üí° Working demo scripts
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ speech_to_speech_example.py   # üó£Ô∏è Real-time voice conversation
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ weather_chat_completion_example.py # üå¶Ô∏è Weather function demo
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ weather_test_example.py       # üß™ Weather function testing
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ transcription_example.py      # üìù Transcription demo
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ audio_test.py                 # üîä Audio system testing
‚îú‚îÄ‚îÄ üìÅ websocket_client/                 # üîå WebSocket client implementation
‚îú‚îÄ‚îÄ üìÅ webrtc_client/                    # üåê WebRTC client implementation
‚îú‚îÄ‚îÄ üìÅ server/                           # üñ•Ô∏è Server-side components
‚îú‚îÄ‚îÄ üìÅ docs/                             # üìñ Detailed API documentation
‚îî‚îÄ‚îÄ üìÅ tests/                            # üß™ API-specific test suite
```

**File Naming Convention**:
- Examples: `[feature]_example.py`
- Tests: `[component]_test.py` or `test_[component].py`
- Documentation: `[SUBJECT]_[TYPE].md`

### 3. Twilio Voice AI Assistant (`/twilio_voice_ai/`)

**Purpose**: Complete Twilio Voice AI Assistant with phone call integration

**Structure**:
```
twilio_voice_ai/
‚îú‚îÄ‚îÄ üìÑ main.py                           # üöÄ FastAPI server entry point
‚îú‚îÄ‚îÄ üìÑ requirements.txt                  # üì¶ Twilio project dependencies
‚îú‚îÄ‚îÄ üìÑ .env.example                      # üîë Environment configuration template
‚îú‚îÄ‚îÄ üìÑ README.md                         # üìö Comprehensive setup guide
‚îú‚îÄ‚îÄ üìÑ SETUP_GUIDE.md                    # ‚ö° Quick deployment instructions
‚îú‚îÄ‚îÄ üìÑ install.py                        # üîß Automated installation script
‚îú‚îÄ‚îÄ üìÑ test_setup.py                     # ‚úÖ Setup and dependency validation
‚îú‚îÄ‚îÄ üìÑ test_simple.py                    # üß™ Core functionality verification
‚îú‚îÄ‚îÄ üìÑ test_api.py                       # üåê FastAPI endpoint testing
‚îî‚îÄ‚îÄ üìÑ .gitignore                        # üö´ Project-specific git exclusions
```

**File Naming Convention**:
- Main server: `main.py` (only in this directory)
- Tests: `test_[component].py`
- Documentation: `[PURPOSE]_GUIDE.md` or `README.md`
- Setup scripts: `[action].py` (install.py, setup.py, etc.)

### 4. Cursor Configuration (`/.cursor/`)

**Purpose**: IDE-specific rules, workflows, and configuration

**Structure**:
```
.cursor/
‚îî‚îÄ‚îÄ üìÅ rules/                            # üìã Cursor IDE automation rules
    ‚îú‚îÄ‚îÄ üìÑ automated-workflow-checks.mdc  # ü§ñ Quality & automation enforcement
    ‚îú‚îÄ‚îÄ üìÑ voice-agent-workflow.mdc       # üé§ Development workflow standards
    ‚îî‚îÄ‚îÄ üìÑ file-structure-standards.mdc   # üèóÔ∏è Project organization rules
```

**File Naming Convention**:
- Rules: `[purpose]-[type].mdc`
- Configuration: `[component].json` or `[component].yaml`

## üìã File Type Standards

### Python Files (`.py`)

**Categories**:
1. **Entry Points**: `voice_agent_original.py`, `main.py`
2. **Test Files**: `test_*.py` or `*_test.py`
3. **Example Scripts**: `*_example.py`
4. **Utility Scripts**: `install.py`, `setup.py`, `run_all_tests.py`

**Naming Rules**:
- Use snake_case for all Python files
- Be descriptive but concise
- Include purpose in name: `test_`, `example_`, etc.

### Documentation Files (`.md`)

**Categories**:
1. **Project Overview**: `README.md`
2. **Guides**: `SETUP_GUIDE.md`, `VOICE_TROUBLESHOOTING.md`
3. **Specifications**: `WEATHER_FUNCTIONS.md`

**Naming Rules**:
- Use UPPERCASE for standalone documentation
- Use Title_Case for multi-word names
- Be specific about content: `TROUBLESHOOTING`, `SETUP_GUIDE`

### Configuration Files

**Categories**:
1. **Dependencies**: `requirements.txt`
2. **Environment**: `.env`, `.env.example`
3. **Git**: `.gitignore`
4. **IDE**: `.cursor/rules/*.mdc`

**Naming Rules**:
- Follow standard conventions: `requirements.txt`, `.env`
- Use descriptive names for custom configs

## üö´ Forbidden File Patterns

### ‚ùå Files That Should NOT Exist

1. **Duplicate Main Files**:
   - ‚ùå `main.py` in project root (removed for clarity)
   - ‚úÖ `main.py` only in `twilio_voice_ai/`

2. **Temporary Files**:
   - ‚ùå `temp_*.wav`, `temp_*.mp3`
   - ‚ùå `*.tmp`, `*.bak`
   - ‚ùå `.DS_Store` (macOS)

3. **IDE Artifacts**:
   - ‚ùå `.vscode/` (use .cursor/ instead)
   - ‚ùå `*.swp`, `*.swo` (Vim)
   - ‚ùå `Thumbs.db` (Windows)

4. **Python Artifacts**:
   - ‚ùå `*.pyc` files in git
   - ‚ùå `__pycache__/` in git (should be gitignored)

### üîç File Structure Validation

**Automated Checks** (run during pre-commit):
```bash
# Check for forbidden main.py in root
if [ -f "main.py" ]; then
    echo "‚ùå ERROR: main.py found in root - should only be in twilio_voice_ai/"
    exit 1
fi

# Check for temporary files
if ls temp_*.wav temp_*.mp3 2>/dev/null; then
    echo "‚ùå ERROR: Temporary audio files found - clean up required"
    exit 1
fi

# Verify required directories exist
for dir in "voice_agent_tests" "openai_realtime_api" "twilio_voice_ai"; do
    if [ ! -d "$dir" ]; then
        echo "‚ùå ERROR: Required directory missing: $dir"
        exit 1
    fi
done
```

## üìä Directory Purpose Matrix

| Directory | Primary Purpose | Key Files | Test Coverage |
|-----------|----------------|-----------|---------------|
| `/` | Project root & main agent | `voice_agent_original.py` | Via voice_agent_tests/ |
| `/voice_agent_tests/` | Core testing suite | `run_all_tests.py` | Self-testing |
| `/openai_realtime_api/` | API integration | WebSocket/WebRTC clients | Via examples/ |
| `/twilio_voice_ai/` | Phone call integration | `main.py` | Via test_*.py |
| `/.cursor/` | IDE configuration | `rules/*.mdc` | Manual validation |

## üîß File Management Best Practices

### Creation Guidelines

1. **Before Creating New Files**:
   - Verify it belongs in the correct directory
   - Follow naming conventions for the file type
   - Consider if it duplicates existing functionality

2. **Directory Selection**:
   - **Root**: Only core project files
   - **voice_agent_tests/**: Test files and troubleshooting
   - **openai_realtime_api/**: API integration and examples
   - **twilio_voice_ai/**: Complete standalone phone AI project

3. **File Naming**:
   - Be consistent with existing patterns
   - Use descriptive names that explain purpose
   - Follow category conventions (test_, example_, etc.)

### Cleanup Procedures

**After Each Development Session**:
```bash
# Remove temporary files
find . -name "temp_*" -delete
find . -name "*.tmp" -delete

# Clean Python cache
find . -name "__pycache__" -type d -exec rm -rf {} +
find . -name "*.pyc" -delete

# Verify structure integrity
python -c "
import os
required_dirs = ['voice_agent_tests', 'openai_realtime_api', 'twilio_voice_ai']
for d in required_dirs:
    assert os.path.exists(d), f'Missing required directory: {d}'
print('‚úÖ File structure validated')
"
```

## üéØ Structural Quality Gates

### ‚úÖ Green Light Indicators

- All required directories present
- No duplicate main.py files
- Consistent naming conventions followed
- No temporary files in repository
- Proper separation of concerns by directory

### ‚ùå Red Flag Triggers

- Missing core directories
- Files in wrong locations
- Inconsistent naming patterns
- Temporary files tracked in git
- Circular dependencies between directories

## üìà Structure Evolution Guidelines

### Adding New Components

1. **Assess Directory Fit**:
   - Core voice agent ‚Üí `/voice_agent_tests/`
   - API integration ‚Üí `/openai_realtime_api/`
   - Phone functionality ‚Üí `/twilio_voice_ai/`
   - New major feature ‚Üí Create new directory

2. **Maintain Consistency**:
   - Follow existing patterns
   - Update this documentation
   - Add appropriate tests
   - Update automation rules

3. **Avoid Fragmentation**:
   - Don't create single-file directories
   - Group related functionality
   - Maintain clear boundaries

This file structure ensures maintainable, scalable, and well-organized code that supports the project's multiple integration patterns while maintaining clear separation of concerns.
