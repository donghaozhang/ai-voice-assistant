---
description: 
globs: 
alwaysApply: true
---
# Voice Agent Development Workflow Rules

## üîß Environment Setup Requirements

### Conda Environment Activation
**CRITICAL**: This project requires the `ai-researcher` conda environment to run properly.

**Before any coding or testing operations:**
```bash
conda activate ai-researcher
```

**Environment verification:**
- Check current environment: `conda info --envs`
- Verify Python version: `python --version` (should be 3.10.16)
- Required packages: openai, elevenlabs, mem0ai, pygame, pyaudio, crewai, websocket-client

**If environment doesn't exist:**
```bash
conda create -n ai-researcher python=3.10
conda activate ai-researcher
pip install -r requirements.txt
```

## üìÅ Project Structure

### Core Voice Agent Files
- Main entry point: [voice_agent_original.py](mdc:voice_agent_original.py)
- Basic version: [voice_agent.py](mdc:voice_agent.py) 
- Dependencies: [requirements.txt](mdc:requirements.txt)
- Documentation: [README.md](mdc:README.md)
- Tests directory: [tests/](mdc:tests) with comprehensive test suite
- Test runner: [tests/run_all_tests.py](mdc:tests/run_all_tests.py)
- Troubleshooting guide: [VOICE_TROUBLESHOOTING.md](mdc:VOICE_TROUBLESHOOTING.md)

### OpenAI Realtime API Integration
- **Main package**: [openai_realtime_api/](mdc:openai_realtime_api/)
  - Package initialization: [__init__.py](mdc:openai_realtime_api/__init__.py)
  - Project documentation: [README.md](mdc:openai_realtime_api/README.md)
  - Dependencies: [requirements.txt](mdc:openai_realtime_api/requirements.txt)
  - Function calling guide: [WEATHER_FUNCTIONS.md](mdc:openai_realtime_api/WEATHER_FUNCTIONS.md)

### Working Examples and Demos
- **Examples directory**: [openai_realtime_api/examples/](mdc:openai_realtime_api/examples/)
  - **Speech-to-speech with weather**: [speech_to_speech_example.py](mdc:openai_realtime_api/examples/speech_to_speech_example.py)
  - **Weather function calling**: [weather_chat_completion_example.py](mdc:openai_realtime_api/examples/weather_chat_completion_example.py)
  - **Weather testing**: [weather_test_example.py](mdc:openai_realtime_api/examples/weather_test_example.py)
  - **Transcription demo**: [transcription_example.py](mdc:openai_realtime_api/examples/transcription_example.py)
  - **Audio testing**: [audio_test.py](mdc:openai_realtime_api/examples/audio_test.py)

### Client Components
- **WebSocket client**: [openai_realtime_api/websocket_client/](mdc:openai_realtime_api/websocket_client/)
- **WebRTC client**: [openai_realtime_api/webrtc_client/](mdc:openai_realtime_api/webrtc_client/)
- **Server components**: [openai_realtime_api/server/](mdc:openai_realtime_api/server/)
- **Documentation**: [openai_realtime_api/docs/](mdc:openai_realtime_api/docs/)
- **API tests**: [openai_realtime_api/tests/](mdc:openai_realtime_api/tests/)

### Twilio Voice AI Assistant Project
- **Main project directory**: [twilio_voice_ai/](mdc:twilio_voice_ai/)
  - **FastAPI server**: [main.py](mdc:twilio_voice_ai/main.py) - Core server with Twilio webhooks and OpenAI integration
  - **Dependencies**: [requirements.txt](mdc:twilio_voice_ai/requirements.txt) - FastAPI, Uvicorn, WebSockets, Twilio SDK
  - **Environment setup**: [.env.example](mdc:twilio_voice_ai/.env.example) - API key configuration template
  - **Documentation**: [README.md](mdc:twilio_voice_ai/README.md) - Comprehensive setup and usage guide
  - **Quick setup**: [SETUP_GUIDE.md](mdc:twilio_voice_ai/SETUP_GUIDE.md) - Fast deployment instructions
  - **Automated installer**: [install.py](mdc:twilio_voice_ai/install.py) - One-command setup script
  
### Twilio Voice AI Testing Suite
- **Setup verification**: [test_setup.py](mdc:twilio_voice_ai/test_setup.py) - Dependency and environment validation
- **Integration tests**: [test_simple.py](mdc:twilio_voice_ai/test_simple.py) - Core functionality verification
- **API endpoint tests**: [test_api.py](mdc:twilio_voice_ai/test_api.py) - FastAPI route validation
- **Git configuration**: [.gitignore](mdc:twilio_voice_ai/.gitignore) - Project-specific exclusions

## üîÑ Git Workflow Automation

### After Each Successful Coding Session

**1. Add all changes:**
```bash
git add .
```

**2. Commit with descriptive message:**
```bash
git commit -m "Descriptive commit message explaining changes"
```

**3. Push to remote repository:**
```bash
git push
```

**Commit Message Guidelines:**
- Use present tense ("Add feature" not "Added feature")
- Be specific about what was changed
- Include test results if applicable
- Examples:
  - "Fix configuration tests to prevent real API calls during testing"
  - "Add comprehensive test suite for voice agent components"
  - "Update README with conda environment setup instructions"
  - "Fix speech-to-speech audio feedback loop and connection issues"
  - "Add weather function calling with Chat Completions API format"

### Git Status Checks
Always check status before committing:
```bash
git status
git diff --staged
```

## üß™ Testing Protocol

### Before Committing Code
1. **Activate conda environment**: `conda activate ai-researcher`
2. **Run all tests**: `python tests/run_all_tests.py`
3. **Run specific component tests**: `python -m pytest tests/test_[component].py -v`
4. **Test Realtime API examples**: `cd openai_realtime_api/examples && python [example_name].py`
5. **Verify test coverage**: Ensure critical functionality is tested

### Test Suite Components
- [tests/test_configuration.py](mdc:tests/test_configuration.py) - Environment and API key validation
- [tests/test_recording.py](mdc:tests/test_recording.py) - Audio recording functionality
- [tests/test_transcription.py](mdc:tests/test_transcription.py) - Speech-to-text conversion
- [tests/test_text_to_speech.py](mdc:tests/test_text_to_speech.py) - Text-to-speech synthesis
- [tests/test_agent_logic.py](mdc:tests/test_agent_logic.py) - AI agent and memory management
- [tests/test_main_loop.py](mdc:tests/test_main_loop.py) - Main conversation flow
- [tests/test_integration.py](mdc:tests/test_integration.py) - End-to-end integration tests

### Realtime API Testing
- **Weather function calling**: Test both current weather and forecast functions
- **Audio feedback prevention**: Ensure no assistant self-conversation loops
- **Connection stability**: Verify WebSocket connections remain stable
- **Function schema validation**: Test Chat Completions API compatible formats

## üîÑ Cursor Update Checking

### Automatic Update Verification
Before starting any development session:

**1. Check Cursor version:**
- Use Cursor's built-in update checker: `Ctrl+Shift+P` ‚Üí "Check for Updates"
- Or check manually in Help ‚Üí About

**2. Update if available:**
- Follow Cursor's update prompts
- Restart Cursor after updates
- Verify extensions are still working

**3. Verify workspace integrity:**
- Ensure all project files are accessible
- Check that syntax highlighting works
- Verify IntelliSense is functioning

### Extension Management
Keep these extensions updated:
- Python extension for syntax support
- Git extensions for version control
- Testing framework extensions

## ‚ö° Quick Commands Reference

### Development Workflow
```bash
# 1. Activate environment
conda activate ai-researcher

# 2. Run specific tests
python -m pytest tests/test_configuration.py -v

# 3. Run all tests
python tests/run_all_tests.py

# 4. Test Realtime API examples
cd openai_realtime_api/examples
python speech_to_speech_example.py
python weather_chat_completion_example.py

# 5. Git workflow (after successful changes)
git add .
git commit -m "Your descriptive commit message"
git push
```

### Troubleshooting Commands
```bash
# Check environment
conda info --envs
python --version
pip list | findstr -i "openai elevenlabs mem0 pygame pyaudio crewai websocket"

# Check git status
git status
git log --oneline -5

# Test specific functionality
python voice_agent_original.py  # (with proper API keys in .env)

# Test Realtime API functionality
cd openai_realtime_api/examples
python audio_test.py
python transcription_example.py
```

### Weather Function Testing
```bash
# Navigate to examples directory
cd openai_realtime_api/examples

# Test current weather function
python weather_test_example.py

# Test Chat Completions API format
python weather_chat_completion_example.py

# Full speech-to-speech with weather
python speech_to_speech_example.py
```

### Twilio Voice AI Assistant Commands
```bash
# Navigate to Twilio project
cd twilio_voice_ai

# Automated setup and installation
python install.py

# Verify setup and dependencies
python test_setup.py

# Run integration tests
python test_simple.py

# Test API endpoints
python test_api.py

# Start the FastAPI server
python main.py

# Start server with uvicorn directly
uvicorn main:app --host 0.0.0.0 --port 5050

# Expose server publicly with ngrok
ngrok http 5050
```

## üö® Critical Reminders

1. **Always activate `ai-researcher` conda environment first**
2. **Never commit without running tests**
3. **Always add descriptive commit messages**
4. **Keep Cursor updated for optimal performance**
5. **Verify all API keys are properly set in `.env` file**
6. **Clean up temporary files after testing**
7. **Test Realtime API examples before committing changes**
8. **Ensure WebSocket connections are stable**
9. **Prevent audio feedback loops in speech-to-speech demos**

## üéØ Success Metrics

- ‚úÖ Environment properly activated
- ‚úÖ All tests passing (target: 90%+ success rate)
- ‚úÖ Code committed with clear messages
- ‚úÖ Changes pushed to remote repository
- ‚úÖ No temporary files left in workspace
- ‚úÖ Cursor IDE running latest version
- ‚úÖ Realtime API examples working without errors
- ‚úÖ Weather function calling operational
- ‚úÖ Speech-to-speech demos stable (no feedback loops)
- ‚úÖ WebSocket connections maintained properly

## üìä Feature Status

### Completed Features
- ‚úÖ Basic voice agent functionality
- ‚úÖ OpenAI Realtime API integration
- ‚úÖ Weather function calling (Chat Completions format)
- ‚úÖ Speech-to-speech conversation with weather
- ‚úÖ Audio feedback loop prevention
- ‚úÖ Connection stability improvements
- ‚úÖ Comprehensive test suite
- ‚úÖ Documentation and troubleshooting guides
- ‚úÖ Twilio Voice AI Assistant with phone call integration
- ‚úÖ FastAPI server with WebSocket media streaming
- ‚úÖ Automated deployment and testing scripts

### Active Components
- üü¢ **voice_agent_original.py** - Main voice agent
- üü¢ **speech_to_speech_example.py** - Real-time voice conversation
- üü¢ **weather_chat_completion_example.py** - Weather function demo
- üü¢ **twilio_voice_ai/main.py** - Twilio Voice AI FastAPI server
- üü¢ **All test suites** - Comprehensive testing coverage

